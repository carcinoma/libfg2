# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libfg2', [dirname(__file__)])
        except ImportError:
            import _libfg2
            return _libfg2
        if fp is not None:
            try:
                _mod = imp.load_module('_libfg2', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libfg2 = swig_import_helper()
    del swig_import_helper
else:
    import _libfg2
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


FG_DEFAULT_DEVICE = _libfg2.FG_DEFAULT_DEVICE
FG_DEFAULT_WIDTH = _libfg2.FG_DEFAULT_WIDTH
FG_DEFAULT_HEIGHT = _libfg2.FG_DEFAULT_HEIGHT
FG_SOURCE_TV = _libfg2.FG_SOURCE_TV
FG_SOURCE_COMPOSITE = _libfg2.FG_SOURCE_COMPOSITE
FG_SOURCE_SVIDEO = _libfg2.FG_SOURCE_SVIDEO
FG_MAX_INPUTS = _libfg2.FG_MAX_INPUTS
FG_MAX_TUNERS = _libfg2.FG_MAX_TUNERS
FG_READ_TIMEOUT = _libfg2.FG_READ_TIMEOUT
class fg_rect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fg_rect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fg_rect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["left"] = _libfg2.fg_rect_left_set
    __swig_getmethods__["left"] = _libfg2.fg_rect_left_get
    if _newclass:left = _swig_property(_libfg2.fg_rect_left_get, _libfg2.fg_rect_left_set)
    __swig_setmethods__["top"] = _libfg2.fg_rect_top_set
    __swig_getmethods__["top"] = _libfg2.fg_rect_top_get
    if _newclass:top = _swig_property(_libfg2.fg_rect_top_get, _libfg2.fg_rect_top_set)
    __swig_setmethods__["width"] = _libfg2.fg_rect_width_set
    __swig_getmethods__["width"] = _libfg2.fg_rect_width_get
    if _newclass:width = _swig_property(_libfg2.fg_rect_width_get, _libfg2.fg_rect_width_set)
    __swig_setmethods__["height"] = _libfg2.fg_rect_height_set
    __swig_getmethods__["height"] = _libfg2.fg_rect_height_get
    if _newclass:height = _swig_property(_libfg2.fg_rect_height_get, _libfg2.fg_rect_height_set)
    def __init__(self): 
        this = _libfg2.new_fg_rect()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libfg2.delete_fg_rect
    __del__ = lambda self : None;
fg_rect_swigregister = _libfg2.fg_rect_swigregister
fg_rect_swigregister(fg_rect)

class fg_size(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fg_size, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fg_size, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _libfg2.fg_size_width_set
    __swig_getmethods__["width"] = _libfg2.fg_size_width_get
    if _newclass:width = _swig_property(_libfg2.fg_size_width_get, _libfg2.fg_size_width_set)
    __swig_setmethods__["height"] = _libfg2.fg_size_height_set
    __swig_getmethods__["height"] = _libfg2.fg_size_height_get
    if _newclass:height = _swig_property(_libfg2.fg_size_height_get, _libfg2.fg_size_height_set)
    def __init__(self): 
        this = _libfg2.new_fg_size()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libfg2.delete_fg_size
    __del__ = lambda self : None;
fg_size_swigregister = _libfg2.fg_size_swigregister
fg_size_swigregister(fg_size)

class fg_rgb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fg_rgb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fg_rgb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["red"] = _libfg2.fg_rgb_red_set
    __swig_getmethods__["red"] = _libfg2.fg_rgb_red_get
    if _newclass:red = _swig_property(_libfg2.fg_rgb_red_get, _libfg2.fg_rgb_red_set)
    __swig_setmethods__["green"] = _libfg2.fg_rgb_green_set
    __swig_getmethods__["green"] = _libfg2.fg_rgb_green_get
    if _newclass:green = _swig_property(_libfg2.fg_rgb_green_get, _libfg2.fg_rgb_green_set)
    __swig_setmethods__["blue"] = _libfg2.fg_rgb_blue_set
    __swig_getmethods__["blue"] = _libfg2.fg_rgb_blue_get
    if _newclass:blue = _swig_property(_libfg2.fg_rgb_blue_get, _libfg2.fg_rgb_blue_set)
    def __init__(self): 
        this = _libfg2.new_fg_rgb()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libfg2.delete_fg_rgb
    __del__ = lambda self : None;
fg_rgb_swigregister = _libfg2.fg_rgb_swigregister
fg_rgb_swigregister(fg_rgb)

class fg_frame(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fg_frame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fg_frame, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _libfg2.fg_frame_size_set
    __swig_getmethods__["size"] = _libfg2.fg_frame_size_get
    if _newclass:size = _swig_property(_libfg2.fg_frame_size_get, _libfg2.fg_frame_size_set)
    __swig_setmethods__["rowstride"] = _libfg2.fg_frame_rowstride_set
    __swig_getmethods__["rowstride"] = _libfg2.fg_frame_rowstride_get
    if _newclass:rowstride = _swig_property(_libfg2.fg_frame_rowstride_get, _libfg2.fg_frame_rowstride_set)
    __swig_setmethods__["format"] = _libfg2.fg_frame_format_set
    __swig_getmethods__["format"] = _libfg2.fg_frame_format_get
    if _newclass:format = _swig_property(_libfg2.fg_frame_format_get, _libfg2.fg_frame_format_set)
    __swig_setmethods__["length"] = _libfg2.fg_frame_length_set
    __swig_getmethods__["length"] = _libfg2.fg_frame_length_get
    if _newclass:length = _swig_property(_libfg2.fg_frame_length_get, _libfg2.fg_frame_length_set)
    __swig_setmethods__["data"] = _libfg2.fg_frame_data_set
    __swig_getmethods__["data"] = _libfg2.fg_frame_data_get
    if _newclass:data = _swig_property(_libfg2.fg_frame_data_get, _libfg2.fg_frame_data_set)
    __swig_setmethods__["timestamp"] = _libfg2.fg_frame_timestamp_set
    __swig_getmethods__["timestamp"] = _libfg2.fg_frame_timestamp_get
    if _newclass:timestamp = _swig_property(_libfg2.fg_frame_timestamp_get, _libfg2.fg_frame_timestamp_set)
    def __init__(self): 
        this = _libfg2.new_fg_frame()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libfg2.delete_fg_frame
    __del__ = lambda self : None;
fg_frame_swigregister = _libfg2.fg_frame_swigregister
fg_frame_swigregister(fg_frame)

class fg_grabber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fg_grabber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fg_grabber, name)
    __repr__ = _swig_repr
    __swig_setmethods__["device"] = _libfg2.fg_grabber_device_set
    __swig_getmethods__["device"] = _libfg2.fg_grabber_device_get
    if _newclass:device = _swig_property(_libfg2.fg_grabber_device_get, _libfg2.fg_grabber_device_set)
    __swig_setmethods__["fd"] = _libfg2.fg_grabber_fd_set
    __swig_getmethods__["fd"] = _libfg2.fg_grabber_fd_get
    if _newclass:fd = _swig_property(_libfg2.fg_grabber_fd_get, _libfg2.fg_grabber_fd_set)
    __swig_setmethods__["caps"] = _libfg2.fg_grabber_caps_set
    __swig_getmethods__["caps"] = _libfg2.fg_grabber_caps_get
    if _newclass:caps = _swig_property(_libfg2.fg_grabber_caps_get, _libfg2.fg_grabber_caps_set)
    __swig_setmethods__["inputs"] = _libfg2.fg_grabber_inputs_set
    __swig_getmethods__["inputs"] = _libfg2.fg_grabber_inputs_get
    if _newclass:inputs = _swig_property(_libfg2.fg_grabber_inputs_get, _libfg2.fg_grabber_inputs_set)
    __swig_setmethods__["num_inputs"] = _libfg2.fg_grabber_num_inputs_set
    __swig_getmethods__["num_inputs"] = _libfg2.fg_grabber_num_inputs_get
    if _newclass:num_inputs = _swig_property(_libfg2.fg_grabber_num_inputs_get, _libfg2.fg_grabber_num_inputs_set)
    __swig_setmethods__["input"] = _libfg2.fg_grabber_input_set
    __swig_getmethods__["input"] = _libfg2.fg_grabber_input_get
    if _newclass:input = _swig_property(_libfg2.fg_grabber_input_get, _libfg2.fg_grabber_input_set)
    __swig_setmethods__["tuners"] = _libfg2.fg_grabber_tuners_set
    __swig_getmethods__["tuners"] = _libfg2.fg_grabber_tuners_get
    if _newclass:tuners = _swig_property(_libfg2.fg_grabber_tuners_get, _libfg2.fg_grabber_tuners_set)
    __swig_setmethods__["num_tuners"] = _libfg2.fg_grabber_num_tuners_set
    __swig_getmethods__["num_tuners"] = _libfg2.fg_grabber_num_tuners_get
    if _newclass:num_tuners = _swig_property(_libfg2.fg_grabber_num_tuners_get, _libfg2.fg_grabber_num_tuners_set)
    __swig_setmethods__["tuner"] = _libfg2.fg_grabber_tuner_set
    __swig_getmethods__["tuner"] = _libfg2.fg_grabber_tuner_get
    if _newclass:tuner = _swig_property(_libfg2.fg_grabber_tuner_get, _libfg2.fg_grabber_tuner_set)
    __swig_setmethods__["cropcap"] = _libfg2.fg_grabber_cropcap_set
    __swig_getmethods__["cropcap"] = _libfg2.fg_grabber_cropcap_get
    if _newclass:cropcap = _swig_property(_libfg2.fg_grabber_cropcap_get, _libfg2.fg_grabber_cropcap_set)
    __swig_setmethods__["format"] = _libfg2.fg_grabber_format_set
    __swig_getmethods__["format"] = _libfg2.fg_grabber_format_get
    if _newclass:format = _swig_property(_libfg2.fg_grabber_format_get, _libfg2.fg_grabber_format_set)
    __swig_setmethods__["controls"] = _libfg2.fg_grabber_controls_set
    __swig_getmethods__["controls"] = _libfg2.fg_grabber_controls_get
    if _newclass:controls = _swig_property(_libfg2.fg_grabber_controls_get, _libfg2.fg_grabber_controls_set)
    __swig_setmethods__["num_controls"] = _libfg2.fg_grabber_num_controls_set
    __swig_getmethods__["num_controls"] = _libfg2.fg_grabber_num_controls_get
    if _newclass:num_controls = _swig_property(_libfg2.fg_grabber_num_controls_get, _libfg2.fg_grabber_num_controls_set)
    def __init__(self): 
        this = _libfg2.new_fg_grabber()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libfg2.delete_fg_grabber
    __del__ = lambda self : None;
fg_grabber_swigregister = _libfg2.fg_grabber_swigregister
fg_grabber_swigregister(fg_grabber)


def fg_debug(*args):
  return _libfg2.fg_debug(*args)
fg_debug = _libfg2.fg_debug

def fg_debug_error(*args):
  return _libfg2.fg_debug_error(*args)
fg_debug_error = _libfg2.fg_debug_error

def fg_dump_info(*args):
  return _libfg2.fg_dump_info(*args)
fg_dump_info = _libfg2.fg_dump_info

def fg_open(*args):
  return _libfg2.fg_open(*args)
fg_open = _libfg2.fg_open

def fg_close(*args):
  return _libfg2.fg_close(*args)
fg_close = _libfg2.fg_close

def fg_set_input(*args):
  return _libfg2.fg_set_input(*args)
fg_set_input = _libfg2.fg_set_input

def fg_get_input(*args):
  return _libfg2.fg_get_input(*args)
fg_get_input = _libfg2.fg_get_input

def fg_grab(*args):
  return _libfg2.fg_grab(*args)
fg_grab = _libfg2.fg_grab

def fg_grab_frame(*args):
  return _libfg2.fg_grab_frame(*args)
fg_grab_frame = _libfg2.fg_grab_frame

def fg_get_input_count(*args):
  return _libfg2.fg_get_input_count(*args)
fg_get_input_count = _libfg2.fg_get_input_count

def fg_get_input_name(*args):
  return _libfg2.fg_get_input_name(*args)
fg_get_input_name = _libfg2.fg_get_input_name

def fg_get_input_type(*args):
  return _libfg2.fg_get_input_type(*args)
fg_get_input_type = _libfg2.fg_get_input_type

def fg_set_channel(*args):
  return _libfg2.fg_set_channel(*args)
fg_set_channel = _libfg2.fg_set_channel

def fg_get_channel(*args):
  return _libfg2.fg_get_channel(*args)
fg_get_channel = _libfg2.fg_get_channel

def fg_set_format(*args):
  return _libfg2.fg_set_format(*args)
fg_set_format = _libfg2.fg_set_format

def fg_get_format(*args):
  return _libfg2.fg_get_format(*args)
fg_get_format = _libfg2.fg_get_format

def fg_set_capture_size(*args):
  return _libfg2.fg_set_capture_size(*args)
fg_set_capture_size = _libfg2.fg_set_capture_size

def fg_get_capture_size(*args):
  return _libfg2.fg_get_capture_size(*args)
fg_get_capture_size = _libfg2.fg_get_capture_size

def fg_set_capture_window(*args):
  return _libfg2.fg_set_capture_window(*args)
fg_set_capture_window = _libfg2.fg_set_capture_window

def fg_get_capture_window(*args):
  return _libfg2.fg_get_capture_window(*args)
fg_get_capture_window = _libfg2.fg_get_capture_window

def fg_default_controls(*args):
  return _libfg2.fg_default_controls(*args)
fg_default_controls = _libfg2.fg_default_controls

def fg_set_control(*args):
  return _libfg2.fg_set_control(*args)
fg_set_control = _libfg2.fg_set_control

def fg_get_control(*args):
  return _libfg2.fg_get_control(*args)
fg_get_control = _libfg2.fg_get_control

def fg_get_control_name(*args):
  return _libfg2.fg_get_control_name(*args)
fg_get_control_name = _libfg2.fg_get_control_name

def fg_set_brightness(*args):
  return _libfg2.fg_set_brightness(*args)
fg_set_brightness = _libfg2.fg_set_brightness

def fg_set_hue(*args):
  return _libfg2.fg_set_hue(*args)
fg_set_hue = _libfg2.fg_set_hue

def fg_set_contrast(*args):
  return _libfg2.fg_set_contrast(*args)
fg_set_contrast = _libfg2.fg_set_contrast

def fg_set_saturation(*args):
  return _libfg2.fg_set_saturation(*args)
fg_set_saturation = _libfg2.fg_set_saturation

def fg_frame_new(*args):
  return _libfg2.fg_frame_new(*args)
fg_frame_new = _libfg2.fg_frame_new

def fg_frame_release(*args):
  return _libfg2.fg_frame_release(*args)
fg_frame_release = _libfg2.fg_frame_release

def fg_frame_free(*args):
  return _libfg2.fg_frame_free(*args)
fg_frame_free = _libfg2.fg_frame_free

def fg_frame_get_data(*args):
  return _libfg2.fg_frame_get_data(*args)
fg_frame_get_data = _libfg2.fg_frame_get_data

def fg_frame_get_size(*args):
  return _libfg2.fg_frame_get_size(*args)
fg_frame_get_size = _libfg2.fg_frame_get_size

def fg_frame_get_width(*args):
  return _libfg2.fg_frame_get_width(*args)
fg_frame_get_width = _libfg2.fg_frame_get_width

def fg_frame_get_height(*args):
  return _libfg2.fg_frame_get_height(*args)
fg_frame_get_height = _libfg2.fg_frame_get_height

def fg_debug_frame(*args):
  return _libfg2.fg_debug_frame(*args)
fg_debug_frame = _libfg2.fg_debug_frame

def fg_frame_copy(*args):
  return _libfg2.fg_frame_copy(*args)
fg_frame_copy = _libfg2.fg_frame_copy

def fg_frame_clone(*args):
  return _libfg2.fg_frame_clone(*args)
fg_frame_clone = _libfg2.fg_frame_clone


